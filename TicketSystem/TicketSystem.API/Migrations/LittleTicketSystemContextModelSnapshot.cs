// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketSystem.API.Models.DB;

namespace TicketSystem.API.Migrations
{
    [DbContext(typeof(LittleTicketSystemContext))]
    partial class LittleTicketSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TicketSystem.API.Models.DB.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdminPassword");

                    b.Property<int>("AdminUserName");

                    b.HasKey("Id");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("TicketSystem.API.Models.DB.Departments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DepartmentName");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("TicketSystem.API.Models.DB.Mail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MailDescription");

                    b.Property<int>("MailTitle");

                    b.Property<int?>("UserIdid")
                        .HasColumnName("UserIDID");

                    b.HasKey("Id");

                    b.HasIndex("UserIdid");

                    b.ToTable("Mail");
                });

            modelBuilder.Entity("TicketSystem.API.Models.DB.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NotificationDescription");

                    b.Property<int>("NotificationId")
                        .HasColumnName("NotificationID");

                    b.Property<int>("NotificationTitle");

                    b.Property<int?>("UserIdid")
                        .HasColumnName("UserIDID");

                    b.HasKey("Id");

                    b.HasIndex("UserIdid");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("TicketSystem.API.Models.DB.Tickets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignDate");

                    b.Property<int>("AssignUser");

                    b.Property<string>("CreateDate");

                    b.Property<int>("CreateUser");

                    b.Property<string>("Status");

                    b.Property<string>("TicketDescription");

                    b.Property<string>("TicketTitle");

                    b.Property<string>("UpdateDate");

                    b.Property<int>("UpdateUser");

                    b.Property<int?>("UserIdid")
                        .HasColumnName("UserIDID");

                    b.HasKey("Id");

                    b.HasIndex("UserIdid");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("TicketSystem.API.Models.DB.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DeparmentIdid")
                        .HasColumnName("DeparmentIDID");

                    b.Property<string>("UserAvatar");

                    b.Property<string>("UserEmail");

                    b.Property<string>("UserLastIp")
                        .HasColumnName("UserLastIP");

                    b.Property<string>("UserLastLogin");

                    b.Property<string>("UserName");

                    b.Property<string>("UserPassword");

                    b.Property<string>("UserPhoneNumber");

                    b.HasKey("Id");

                    b.HasIndex("DeparmentIdid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TicketSystem.API.Models.DB.Mail", b =>
                {
                    b.HasOne("TicketSystem.API.Models.DB.Users", "UserId")
                        .WithMany("Mail")
                        .HasForeignKey("UserIdid");
                });

            modelBuilder.Entity("TicketSystem.API.Models.DB.Notifications", b =>
                {
                    b.HasOne("TicketSystem.API.Models.DB.Users", "UserId")
                        .WithMany("Notifications")
                        .HasForeignKey("UserIdid");
                });

            modelBuilder.Entity("TicketSystem.API.Models.DB.Tickets", b =>
                {
                    b.HasOne("TicketSystem.API.Models.DB.Users", "UserId")
                        .WithMany("Tickets")
                        .HasForeignKey("UserIdid");
                });

            modelBuilder.Entity("TicketSystem.API.Models.DB.Users", b =>
                {
                    b.HasOne("TicketSystem.API.Models.DB.Departments", "DeparmentId")
                        .WithMany("Users")
                        .HasForeignKey("DeparmentIdid");
                });
#pragma warning restore 612, 618
        }
    }
}
